// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Test Mux
    Mux16(a=instruction, b=null, sel=outNot, out[0]=jmp0, out[1]=jmp1, out[2]=jmp2, out[4]=selDReg, out[5]=selAWrite, out[6]=selNo, out[7]=selF, out[8]=selNy, out[9]=selZy, out[10]=selNx, out[11]=selZx, out[12]=selMux2, out[15]=selAReg, out=outMuxInst);

    // Mux to A register
    Mux16(a=instruction, b=outALU, sel=selAReg, out=outMux1);
    


    // A register load bit 
    Not(in=selAReg, out=outNot);
    Or(a=outNot, b=selAWrite, out=outOr);
    Register(in=outMux1, load=outNot, out[0..14]=addressM, out=outAReg); 

    // Mux to ALU
    Mux16(a=outAReg, b=inM, sel=selMux2, out=outMux2);

    // D register
    Register(in=outALU, load=selDReg, out=outDReg);

    // ALU
    ALU(x=outDReg, y=outMux2, zx=selZx, nx=selNx, zy=selZy, ny=selNy, f=selF, no=selNo, zr=ourZr, ng=outNg, out=outALU);

    //Jmp operations
    And(a=ng, b=jmp2, out=outNg);
    And(a=zr, b=jmp1, out=outZr);
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=notNg, b=notZr, out=outPos1);
    And(a=outPos1, b=jmp0, out=posOutMain);
    Or(a=outNg, b=outZr, out=orOut1);
    Or(a=orOut1, b=posOutMain, out=orOutmain);

    // PC
    Not(in=orOutmain, out=NotLoad);
    PC(in=aregout, load=orOutmain, inc=notLoad, reset=reset, out=pc);

}
